// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

@file:Suppress("NAME_SHADOWING")

package dev.soupslurpr.beautyxt

// Common helper code.
//
// Ideally this would live in a separate .kt file where it can be unittested etc
// in isolation, and perhaps even published as a re-useable package.
//
// However, it's important that the details of how this helper code works (e.g. the
// way that different builtin types are passed across the FFI) exactly match what's
// expected by the Rust code on the other side of the interface. In practice right
// now that means coming from the exact some version of `uniffi` that was used to
// compile the Rust component. The easiest way to ensure this is to bundle the Kotlin
// helpers directly inline like we're doing here.

import com.sun.jna.IntegerType
import com.sun.jna.Library
import com.sun.jna.Native
import com.sun.jna.Pointer
import com.sun.jna.Structure
import com.sun.jna.ptr.*
import java.nio.ByteBuffer
import java.nio.ByteOrder
import java.nio.CharBuffer
import java.nio.charset.CodingErrorAction
import java.util.concurrent.ConcurrentHashMap

// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

@Structure.FieldOrder("capacity", "len", "data")
open class RustBuffer : Structure() {
    @JvmField var capacity: Int = 0
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue: RustBuffer(), Structure.ByValue
    class ByReference: RustBuffer(), Structure.ByReference

    companion object {
        internal fun alloc(size: Int = 0) = rustCall { status ->
            _UniFFILib.INSTANCE.ffi_beautyxt_rs_rustbuffer_alloc(size, status)
        }.also {
            if(it.data == null) {
               throw RuntimeException("RustBuffer.alloc() returned null data pointer (size=${size})")
           }
        }

        internal fun free(buf: ByValue) = rustCall { status ->
            _UniFFILib.INSTANCE.ffi_beautyxt_rs_rustbuffer_free(buf, status)
        }
    }

    @Suppress("TooGenericExceptionThrown")
    fun asByteBuffer() =
        this.data?.getByteBuffer(0, this.len.toLong())?.also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
}

/**
 * The equivalent of the `*mut RustBuffer` type.
 * Required for callbacks taking in an out pointer.
 *
 * Size is the sum of all values in the struct.
 */
class RustBufferByReference : ByReference(16) {
    /**
     * Set the pointed-to `RustBuffer` to the given value.
     */
    fun setValue(value: RustBuffer.ByValue) {
        // NOTE: The offsets are as they are in the C-like struct.
        val pointer = pointer
        pointer.setInt(0, value.capacity)
        pointer.setInt(4, value.len)
        pointer.setPointer(8, value.data)
    }

    /**
     * Get a `RustBuffer.ByValue` from this reference.
     */
    fun getValue(): RustBuffer.ByValue {
        val pointer = pointer
        val value = RustBuffer.ByValue()
        value.writeField("capacity", pointer.getInt(0))
        value.writeField("len", pointer.getInt(4))
        value.writeField("data", pointer.getPointer(8))

        return value
    }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to in the JVM, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

@Structure.FieldOrder("len", "data")
open class ForeignBytes : Structure() {
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue : ForeignBytes(), Structure.ByValue
}
// The FfiConverter interface handles converter types to and from the FFI
//
// All implementing objects should be public to support external types.  When a
// type is external we need to import it's FfiConverter.
interface FfiConverter<KotlinType, FfiType> {
    // Convert an FFI type to a Kotlin type
    fun lift(value: FfiType): KotlinType

    // Convert an Kotlin type to an FFI type
    fun lower(value: KotlinType): FfiType

    // Read a Kotlin type from a `ByteBuffer`
    fun read(buf: ByteBuffer): KotlinType

    // Calculate bytes to allocate when creating a `RustBuffer`
    //
    // This must return at least as many bytes as the write() function will
    // write. It can return more bytes than needed, for example when writing
    // Strings we can't know the exact bytes needed until we the UTF-8
    // encoding, so we pessimistically allocate the largest size possible (3
    // bytes per codepoint).  Allocating extra bytes is not really a big deal
    // because the `RustBuffer` is short-lived.
    fun allocationSize(value: KotlinType): Int

    // Write a Kotlin type to a `ByteBuffer`
    fun write(value: KotlinType, buf: ByteBuffer)

    // Lower a value into a `RustBuffer`
    //
    // This method lowers a value into a `RustBuffer` rather than the normal
    // FfiType.  It's used by the callback interface code.  Callback interface
    // returns are always serialized into a `RustBuffer` regardless of their
    // normal FFI type.
    fun lowerIntoRustBuffer(value: KotlinType): RustBuffer.ByValue {
        val rbuf = RustBuffer.alloc(allocationSize(value))
        try {
            val bbuf = rbuf.data!!.getByteBuffer(0, rbuf.capacity.toLong()).also {
                it.order(ByteOrder.BIG_ENDIAN)
            }
            write(value, bbuf)
            rbuf.writeField("len", bbuf.position())
            return rbuf
        } catch (e: Throwable) {
            RustBuffer.free(rbuf)
            throw e
        }
    }

    // Lift a value from a `RustBuffer`.
    //
    // This here mostly because of the symmetry with `lowerIntoRustBuffer()`.
    // It's currently only used by the `FfiConverterRustBuffer` class below.
    fun liftFromRustBuffer(rbuf: RustBuffer.ByValue): KotlinType {
        val byteBuf = rbuf.asByteBuffer()!!
        try {
           val item = read(byteBuf)
           if (byteBuf.hasRemaining()) {
               throw RuntimeException("junk remaining in buffer after lifting, something is very wrong!!")
           }
           return item
        } finally {
            RustBuffer.free(rbuf)
        }
    }
}

// FfiConverter that uses `RustBuffer` as the FfiType
interface FfiConverterRustBuffer<KotlinType>: FfiConverter<KotlinType, RustBuffer.ByValue> {
    override fun lift(value: RustBuffer.ByValue) = liftFromRustBuffer(value)
    override fun lower(value: KotlinType) = lowerIntoRustBuffer(value)
}
// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.
// Error runtime.
@Structure.FieldOrder("code", "error_buf")
internal open class RustCallStatus : Structure() {
    @JvmField var code: Byte = 0
    @JvmField var error_buf: RustBuffer.ByValue = RustBuffer.ByValue()

    class ByValue: RustCallStatus(), Structure.ByValue

    fun isSuccess(): Boolean {
        return code == 0.toByte()
    }

    fun isError(): Boolean {
        return code == 1.toByte()
    }

    fun isPanic(): Boolean {
        return code == 2.toByte()
    }
}

class InternalException(message: String) : Exception(message)

// Each top-level error class has a companion object that can lift the error from the call status's rust buffer
interface CallStatusErrorHandler<E> {
    fun lift(error_buf: RustBuffer.ByValue): E
}

// Helpers for calling Rust
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself

// Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
private inline fun <U, E: Exception> rustCallWithError(errorHandler: CallStatusErrorHandler<E>, callback: (RustCallStatus) -> U): U {
    var status = RustCallStatus()
    val return_value = callback(status)
    checkCallStatus(errorHandler, status)
    return return_value
}

// Check RustCallStatus and throw an error if the call wasn't successful
private fun<E: Exception> checkCallStatus(errorHandler: CallStatusErrorHandler<E>, status: RustCallStatus) {
    if (status.isSuccess()) {
        return
    } else if (status.isError()) {
        throw errorHandler.lift(status.error_buf)
    } else if (status.isPanic()) {
        // when the rust code sees a panic, it tries to construct a rustbuffer
        // with the message.  but if that code panics, then it just sends back
        // an empty buffer.
        if (status.error_buf.len > 0) {
            throw InternalException(FfiConverterString.lift(status.error_buf))
        } else {
            throw InternalException("Rust panic")
        }
    } else {
        throw InternalException("Unknown rust call status: $status.code")
    }
}

// CallStatusErrorHandler implementation for times when we don't expect a CALL_ERROR
object NullCallStatusErrorHandler: CallStatusErrorHandler<InternalException> {
    override fun lift(error_buf: RustBuffer.ByValue): InternalException {
        RustBuffer.free(error_buf)
        return InternalException("Unexpected CALL_ERROR")
    }
}

// Call a rust function that returns a plain value
private inline fun <U> rustCall(callback: (RustCallStatus) -> U): U {
    return rustCallWithError(NullCallStatusErrorHandler, callback)
}

// IntegerType that matches Rust's `usize` / C's `size_t`
class USize(value: Long = 0) : IntegerType(Native.SIZE_T_SIZE, value, true) {
    // This is needed to fill in the gaps of IntegerType's implementation of Number for Kotlin.
    override fun toByte() = toInt().toByte()
    // Needed until https://youtrack.jetbrains.com/issue/KT-47902 is fixed.
    @Deprecated("`toInt().toChar()` is deprecated")
    override fun toChar() = toInt().toChar()
    override fun toShort() = toInt().toShort()

    fun writeToBuffer(buf: ByteBuffer) {
        // Make sure we always write usize integers using native byte-order, since they may be
        // casted to pointer values
        buf.order(ByteOrder.nativeOrder())
        try {
            when (Native.SIZE_T_SIZE) {
                4 -> buf.putInt(toInt())
                8 -> buf.putLong(toLong())
                else -> throw RuntimeException("Invalid SIZE_T_SIZE: ${Native.SIZE_T_SIZE}")
            }
        } finally {
            buf.order(ByteOrder.BIG_ENDIAN)
        }
    }

    companion object {
        val size: Int
            get() = Native.SIZE_T_SIZE

        fun readFromBuffer(buf: ByteBuffer) : USize {
            // Make sure we always read usize integers using native byte-order, since they may be
            // casted from pointer values
            buf.order(ByteOrder.nativeOrder())
            try {
                return when (Native.SIZE_T_SIZE) {
                    4 -> USize(buf.getInt().toLong())
                    8 -> USize(buf.getLong())
                    else -> throw RuntimeException("Invalid SIZE_T_SIZE: ${Native.SIZE_T_SIZE}")
                }
            } finally {
                buf.order(ByteOrder.BIG_ENDIAN)
            }
        }
    }
}


// Map handles to objects
//
// This is used when the Rust code expects an opaque pointer to represent some foreign object.
// Normally we would pass a pointer to the object, but JNA doesn't support getting a pointer from an
// object reference , nor does it support leaking a reference to Rust.
//
// Instead, this class maps USize values to objects so that we can pass a pointer-sized type to
// Rust when it needs an opaque pointer.
//
// TODO: refactor callbacks to use this class
internal class UniFfiHandleMap<T: Any> {
    private val map = ConcurrentHashMap<USize, T>()
    // Use AtomicInteger for our counter, since we may be on a 32-bit system.  4 billion possible
    // values seems like enough. If somehow we generate 4 billion handles, then this will wrap
    // around back to zero and we can assume the first handle generated will have been dropped by
    // then.
    private val counter = java.util.concurrent.atomic.AtomicInteger(0)

    val size: Int
        get() = map.size

    fun insert(obj: T): USize {
        val handle = USize(counter.getAndAdd(1).toLong())
        map.put(handle, obj)
        return handle
    }

    fun get(handle: USize): T? {
        return map.get(handle)
    }

    fun remove(handle: USize): T? {
        return map.remove(handle)
    }
}

// FFI type for Rust future continuations
internal interface UniFffiRustFutureContinuationCallbackType : com.sun.jna.Callback {
    fun callback(continuationHandle: USize, pollResult: Short)
}

// Contains loading, initialization code,
// and the FFI Function declarations in a com.sun.jna.Library.
@Synchronized
private fun findLibraryName(componentName: String): String {
    val libOverride = System.getProperty("uniffi.component.$componentName.libraryOverride")
    if (libOverride != null) {
        return libOverride
    }
    return "beautyxt_rs"
}

private inline fun <reified Lib : Library> loadIndirect(
    componentName: String
): Lib {
    return Native.load<Lib>(findLibraryName(componentName), Lib::class.java)
}

// A JNA Library to expose the extern-C FFI definitions.
// This is an implementation detail which will be called internally by the public API.

internal interface _UniFFILib : Library {
    companion object {
        internal val INSTANCE: _UniFFILib by lazy {
            loadIndirect<_UniFFILib>(componentName = "beautyxt_rs")
            .also { lib: _UniFFILib ->
                uniffiCheckContractApiVersion(lib)
                uniffiCheckApiChecksums(lib)
                }
        }
    }

    fun uniffi_beautyxt_rs_fn_func_add_project_files(`newProjectFiles`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_beautyxt_rs_fn_func_clear_project_files(_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_beautyxt_rs_fn_func_get_project_file_text(`path`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_beautyxt_rs_fn_func_initialize_world(_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_beautyxt_rs_fn_func_markdown_to_docx(`markdown`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_beautyxt_rs_fn_func_markdown_to_html(`markdown`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_beautyxt_rs_fn_func_plain_text_to_docx(`plainText`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_beautyxt_rs_fn_func_remove_project_files(`projectFilesPathsToRemove`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_beautyxt_rs_fn_func_set_main_project_file(`mainProjectFilePathAndFd`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_beautyxt_rs_fn_func_test_get_main_pdf(_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_beautyxt_rs_fn_func_test_get_main_svg(_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_beautyxt_rs_fn_func_update_project_file(`newText`: RustBuffer.ByValue,`path`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_beautyxt_rs_rustbuffer_alloc(`size`: Int,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_beautyxt_rs_rustbuffer_from_bytes(`bytes`: ForeignBytes.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_beautyxt_rs_rustbuffer_free(`buf`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun ffi_beautyxt_rs_rustbuffer_reserve(`buf`: RustBuffer.ByValue,`additional`: Int,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_beautyxt_rs_rust_future_continuation_callback_set(`callback`: UniFffiRustFutureContinuationCallbackType,
    ): Unit
    fun ffi_beautyxt_rs_rust_future_poll_u8(`handle`: Pointer,`uniffiCallback`: USize,
    ): Unit
    fun ffi_beautyxt_rs_rust_future_cancel_u8(`handle`: Pointer,
    ): Unit
    fun ffi_beautyxt_rs_rust_future_free_u8(`handle`: Pointer,
    ): Unit
    fun ffi_beautyxt_rs_rust_future_complete_u8(`handle`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Byte
    fun ffi_beautyxt_rs_rust_future_poll_i8(`handle`: Pointer,`uniffiCallback`: USize,
    ): Unit
    fun ffi_beautyxt_rs_rust_future_cancel_i8(`handle`: Pointer,
    ): Unit
    fun ffi_beautyxt_rs_rust_future_free_i8(`handle`: Pointer,
    ): Unit
    fun ffi_beautyxt_rs_rust_future_complete_i8(`handle`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Byte
    fun ffi_beautyxt_rs_rust_future_poll_u16(`handle`: Pointer,`uniffiCallback`: USize,
    ): Unit
    fun ffi_beautyxt_rs_rust_future_cancel_u16(`handle`: Pointer,
    ): Unit
    fun ffi_beautyxt_rs_rust_future_free_u16(`handle`: Pointer,
    ): Unit
    fun ffi_beautyxt_rs_rust_future_complete_u16(`handle`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Short
    fun ffi_beautyxt_rs_rust_future_poll_i16(`handle`: Pointer,`uniffiCallback`: USize,
    ): Unit
    fun ffi_beautyxt_rs_rust_future_cancel_i16(`handle`: Pointer,
    ): Unit
    fun ffi_beautyxt_rs_rust_future_free_i16(`handle`: Pointer,
    ): Unit
    fun ffi_beautyxt_rs_rust_future_complete_i16(`handle`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Short
    fun ffi_beautyxt_rs_rust_future_poll_u32(`handle`: Pointer,`uniffiCallback`: USize,
    ): Unit
    fun ffi_beautyxt_rs_rust_future_cancel_u32(`handle`: Pointer,
    ): Unit
    fun ffi_beautyxt_rs_rust_future_free_u32(`handle`: Pointer,
    ): Unit
    fun ffi_beautyxt_rs_rust_future_complete_u32(`handle`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Int
    fun ffi_beautyxt_rs_rust_future_poll_i32(`handle`: Pointer,`uniffiCallback`: USize,
    ): Unit
    fun ffi_beautyxt_rs_rust_future_cancel_i32(`handle`: Pointer,
    ): Unit
    fun ffi_beautyxt_rs_rust_future_free_i32(`handle`: Pointer,
    ): Unit
    fun ffi_beautyxt_rs_rust_future_complete_i32(`handle`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Int
    fun ffi_beautyxt_rs_rust_future_poll_u64(`handle`: Pointer,`uniffiCallback`: USize,
    ): Unit
    fun ffi_beautyxt_rs_rust_future_cancel_u64(`handle`: Pointer,
    ): Unit
    fun ffi_beautyxt_rs_rust_future_free_u64(`handle`: Pointer,
    ): Unit
    fun ffi_beautyxt_rs_rust_future_complete_u64(`handle`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Long
    fun ffi_beautyxt_rs_rust_future_poll_i64(`handle`: Pointer,`uniffiCallback`: USize,
    ): Unit
    fun ffi_beautyxt_rs_rust_future_cancel_i64(`handle`: Pointer,
    ): Unit
    fun ffi_beautyxt_rs_rust_future_free_i64(`handle`: Pointer,
    ): Unit
    fun ffi_beautyxt_rs_rust_future_complete_i64(`handle`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Long
    fun ffi_beautyxt_rs_rust_future_poll_f32(`handle`: Pointer,`uniffiCallback`: USize,
    ): Unit
    fun ffi_beautyxt_rs_rust_future_cancel_f32(`handle`: Pointer,
    ): Unit
    fun ffi_beautyxt_rs_rust_future_free_f32(`handle`: Pointer,
    ): Unit
    fun ffi_beautyxt_rs_rust_future_complete_f32(`handle`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Float
    fun ffi_beautyxt_rs_rust_future_poll_f64(`handle`: Pointer,`uniffiCallback`: USize,
    ): Unit
    fun ffi_beautyxt_rs_rust_future_cancel_f64(`handle`: Pointer,
    ): Unit
    fun ffi_beautyxt_rs_rust_future_free_f64(`handle`: Pointer,
    ): Unit
    fun ffi_beautyxt_rs_rust_future_complete_f64(`handle`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Double
    fun ffi_beautyxt_rs_rust_future_poll_pointer(`handle`: Pointer,`uniffiCallback`: USize,
    ): Unit
    fun ffi_beautyxt_rs_rust_future_cancel_pointer(`handle`: Pointer,
    ): Unit
    fun ffi_beautyxt_rs_rust_future_free_pointer(`handle`: Pointer,
    ): Unit
    fun ffi_beautyxt_rs_rust_future_complete_pointer(`handle`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun ffi_beautyxt_rs_rust_future_poll_rust_buffer(`handle`: Pointer,`uniffiCallback`: USize,
    ): Unit
    fun ffi_beautyxt_rs_rust_future_cancel_rust_buffer(`handle`: Pointer,
    ): Unit
    fun ffi_beautyxt_rs_rust_future_free_rust_buffer(`handle`: Pointer,
    ): Unit
    fun ffi_beautyxt_rs_rust_future_complete_rust_buffer(`handle`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_beautyxt_rs_rust_future_poll_void(`handle`: Pointer,`uniffiCallback`: USize,
    ): Unit
    fun ffi_beautyxt_rs_rust_future_cancel_void(`handle`: Pointer,
    ): Unit
    fun ffi_beautyxt_rs_rust_future_free_void(`handle`: Pointer,
    ): Unit
    fun ffi_beautyxt_rs_rust_future_complete_void(`handle`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_beautyxt_rs_checksum_func_add_project_files(
    ): Short
    fun uniffi_beautyxt_rs_checksum_func_clear_project_files(
    ): Short
    fun uniffi_beautyxt_rs_checksum_func_get_project_file_text(
    ): Short
    fun uniffi_beautyxt_rs_checksum_func_initialize_world(
    ): Short
    fun uniffi_beautyxt_rs_checksum_func_markdown_to_docx(
    ): Short
    fun uniffi_beautyxt_rs_checksum_func_markdown_to_html(
    ): Short
    fun uniffi_beautyxt_rs_checksum_func_plain_text_to_docx(
    ): Short
    fun uniffi_beautyxt_rs_checksum_func_remove_project_files(
    ): Short
    fun uniffi_beautyxt_rs_checksum_func_set_main_project_file(
    ): Short
    fun uniffi_beautyxt_rs_checksum_func_test_get_main_pdf(
    ): Short
    fun uniffi_beautyxt_rs_checksum_func_test_get_main_svg(
    ): Short
    fun uniffi_beautyxt_rs_checksum_func_update_project_file(
    ): Short
    fun ffi_beautyxt_rs_uniffi_contract_version(
    ): Int
    
}

private fun uniffiCheckContractApiVersion(lib: _UniFFILib) {
    // Get the bindings contract version from our ComponentInterface
    val bindings_contract_version = 24
    // Get the scaffolding contract version by calling the into the dylib
    val scaffolding_contract_version = lib.ffi_beautyxt_rs_uniffi_contract_version()
    if (bindings_contract_version != scaffolding_contract_version) {
        throw RuntimeException("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    }
}

@Suppress("UNUSED_PARAMETER")
private fun uniffiCheckApiChecksums(lib: _UniFFILib) {
    if (lib.uniffi_beautyxt_rs_checksum_func_add_project_files() != 26793.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_beautyxt_rs_checksum_func_clear_project_files() != 13150.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_beautyxt_rs_checksum_func_get_project_file_text() != 40266.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_beautyxt_rs_checksum_func_initialize_world() != 60119.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_beautyxt_rs_checksum_func_markdown_to_docx() != 19396.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_beautyxt_rs_checksum_func_markdown_to_html() != 42103.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_beautyxt_rs_checksum_func_plain_text_to_docx() != 1235.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_beautyxt_rs_checksum_func_remove_project_files() != 64095.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_beautyxt_rs_checksum_func_set_main_project_file() != 29991.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_beautyxt_rs_checksum_func_test_get_main_pdf() != 23928.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_beautyxt_rs_checksum_func_test_get_main_svg() != 3789.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_beautyxt_rs_checksum_func_update_project_file() != 64068.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// Async support

// Public interface members begin here.


object FfiConverterInt: FfiConverter<Int, Int> {
    override fun lift(value: Int): Int {
        return value
    }

    override fun read(buf: ByteBuffer): Int {
        return buf.getInt()
    }

    override fun lower(value: Int): Int {
        return value
    }

    override fun allocationSize(value: Int) = 4

    override fun write(value: Int, buf: ByteBuffer) {
        buf.putInt(value)
    }
}

object FfiConverterULong: FfiConverter<ULong, Long> {
    override fun lift(value: Long): ULong {
        return value.toULong()
    }

    override fun read(buf: ByteBuffer): ULong {
        return lift(buf.getLong())
    }

    override fun lower(value: ULong): Long {
        return value.toLong()
    }

    override fun allocationSize(value: ULong) = 8

    override fun write(value: ULong, buf: ByteBuffer) {
        buf.putLong(value.toLong())
    }
}

object FfiConverterString: FfiConverter<String, RustBuffer.ByValue> {
    // Note: we don't inherit from FfiConverterRustBuffer, because we use a
    // special encoding when lowering/lifting.  We can use `RustBuffer.len` to
    // store our length and avoid writing it out to the buffer.
    override fun lift(value: RustBuffer.ByValue): String {
        try {
            val byteArr = ByteArray(value.len)
            value.asByteBuffer()!!.get(byteArr)
            return byteArr.toString(Charsets.UTF_8)
        } finally {
            RustBuffer.free(value)
        }
    }

    override fun read(buf: ByteBuffer): String {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr.toString(Charsets.UTF_8)
    }

    fun toUtf8(value: String): ByteBuffer {
        // Make sure we don't have invalid UTF-16, check for lone surrogates.
        return Charsets.UTF_8.newEncoder().run {
            onMalformedInput(CodingErrorAction.REPORT)
            encode(CharBuffer.wrap(value))
        }
    }

    override fun lower(value: String): RustBuffer.ByValue {
        val byteBuf = toUtf8(value)
        // Ideally we'd pass these bytes to `ffi_bytebuffer_from_bytes`, but doing so would require us
        // to copy them into a JNA `Memory`. So we might as well directly copy them into a `RustBuffer`.
        val rbuf = RustBuffer.alloc(byteBuf.limit())
        rbuf.asByteBuffer()!!.put(byteBuf)
        return rbuf
    }

    // We aren't sure exactly how many bytes our string will be once it's UTF-8
    // encoded.  Allocate 3 bytes per UTF-16 code unit which will always be
    // enough.
    override fun allocationSize(value: String): Int {
        val sizeForLength = 4
        val sizeForString = value.length * 3
        return sizeForLength + sizeForString
    }

    override fun write(value: String, buf: ByteBuffer) {
        val byteBuf = toUtf8(value)
        buf.putInt(byteBuf.limit())
        buf.put(byteBuf)
    }
}

object FfiConverterByteArray: FfiConverterRustBuffer<ByteArray> {
    override fun read(buf: ByteBuffer): ByteArray {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr
    }
    override fun allocationSize(value: ByteArray): Int {
        return 4 + value.size
    }
    override fun write(value: ByteArray, buf: ByteBuffer) {
        buf.putInt(value.size)
        buf.put(value)
    }
}




data class CustomSourceDiagnostic (
    var `severity`: CustomSeverity, 
    var `span`: ULong, 
    var `message`: String, 
    var `trace`: List<CustomTracepoint>, 
    var `hints`: List<String>
) {
    
    companion object
}

object FfiConverterTypeCustomSourceDiagnostic: FfiConverterRustBuffer<CustomSourceDiagnostic> {
    override fun read(buf: ByteBuffer): CustomSourceDiagnostic {
        return CustomSourceDiagnostic(
            FfiConverterTypeCustomSeverity.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterString.read(buf),
            FfiConverterSequenceTypeCustomTracepoint.read(buf),
            FfiConverterSequenceString.read(buf),
        )
    }

    override fun allocationSize(value: CustomSourceDiagnostic) = (
            FfiConverterTypeCustomSeverity.allocationSize(value.`severity`) +
            FfiConverterULong.allocationSize(value.`span`) +
            FfiConverterString.allocationSize(value.`message`) +
            FfiConverterSequenceTypeCustomTracepoint.allocationSize(value.`trace`) +
            FfiConverterSequenceString.allocationSize(value.`hints`)
    )

    override fun write(value: CustomSourceDiagnostic, buf: ByteBuffer) {
            FfiConverterTypeCustomSeverity.write(value.`severity`, buf)
            FfiConverterULong.write(value.`span`, buf)
            FfiConverterString.write(value.`message`, buf)
            FfiConverterSequenceTypeCustomTracepoint.write(value.`trace`, buf)
            FfiConverterSequenceString.write(value.`hints`, buf)
    }
}




data class ProjectFilePathAndFd (
    var `path`: String, 
    var `fd`: Int
) {
    
    companion object
}

object FfiConverterTypeProjectFilePathAndFd: FfiConverterRustBuffer<ProjectFilePathAndFd> {
    override fun read(buf: ByteBuffer): ProjectFilePathAndFd {
        return ProjectFilePathAndFd(
            FfiConverterString.read(buf),
            FfiConverterInt.read(buf),
        )
    }

    override fun allocationSize(value: ProjectFilePathAndFd) = (
            FfiConverterString.allocationSize(value.`path`) +
            FfiConverterInt.allocationSize(value.`fd`)
    )

    override fun write(value: ProjectFilePathAndFd, buf: ByteBuffer) {
            FfiConverterString.write(value.`path`, buf)
            FfiConverterInt.write(value.`fd`, buf)
    }
}


sealed class CustomFileException : Exception() {
    // Each variant is a nested class

    class NotFound(
        val `path`: String
    ) : CustomFileException() {
        override val message
            get() = "path=${`path`}"
    }

    class InvalidUtf8 : CustomFileException() {
        override val message
            get() = ""
    }

    class Other(
        val `details`: String?
    ) : CustomFileException() {
        override val message
            get() = "details=${`details`}"
    }


    companion object ErrorHandler : CallStatusErrorHandler<CustomFileException> {
        override fun lift(error_buf: RustBuffer.ByValue): CustomFileException =
            FfiConverterTypeCustomFileError.lift(error_buf)
    }


}

object FfiConverterTypeCustomFileError : FfiConverterRustBuffer<CustomFileException> {
    override fun read(buf: ByteBuffer): CustomFileException {


        return when (buf.getInt()) {
            1 -> CustomFileException.NotFound(
                FfiConverterString.read(buf),
            )

            2 -> CustomFileException.InvalidUtf8()
            3 -> CustomFileException.Other(
                FfiConverterOptionalString.read(buf),
            )

            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: CustomFileException): Int {
        return when (value) {
            is CustomFileException.NotFound -> (
                    // Add the size for the Int that specifies the variant plus the size needed for all fields
                    4
                            + FfiConverterString.allocationSize(value.`path`)
                    )

            is CustomFileException.InvalidUtf8 -> (
                    // Add the size for the Int that specifies the variant plus the size needed for all fields
                    4
                    )

            is CustomFileException.Other -> (
                    // Add the size for the Int that specifies the variant plus the size needed for all fields
                    4
                            + FfiConverterOptionalString.allocationSize(value.`details`)
                    )
        }
    }

    override fun write(value: CustomFileException, buf: ByteBuffer) {
        when (value) {
            is CustomFileException.NotFound -> {
                buf.putInt(1)
                FfiConverterString.write(value.`path`, buf)
            }

            is CustomFileException.InvalidUtf8 -> {
                buf.putInt(2)
                Unit
            }

            is CustomFileException.Other -> {
                buf.putInt(3)
                FfiConverterOptionalString.write(value.`details`, buf)
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}




enum class CustomSeverity {
    ERROR,WARNING;
    companion object
}

object FfiConverterTypeCustomSeverity: FfiConverterRustBuffer<CustomSeverity> {
    override fun read(buf: ByteBuffer) = try {
        CustomSeverity.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: CustomSeverity) = 4

    override fun write(value: CustomSeverity, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}






sealed class CustomTracepoint {
    data class Call(
        val `string`: String?, 
        val `span`: ULong
        ) : CustomTracepoint() {
        companion object
    }
    data class Show(
        val `string`: String, 
        val `span`: ULong
        ) : CustomTracepoint() {
        companion object
    }
    data class Import(
        val `span`: ULong
        ) : CustomTracepoint() {
        companion object
    }
    

    
    companion object
}

object FfiConverterTypeCustomTracepoint : FfiConverterRustBuffer<CustomTracepoint>{
    override fun read(buf: ByteBuffer): CustomTracepoint {
        return when(buf.getInt()) {
            1 -> CustomTracepoint.Call(
                FfiConverterOptionalString.read(buf),
                FfiConverterULong.read(buf),
                )
            2 -> CustomTracepoint.Show(
                FfiConverterString.read(buf),
                FfiConverterULong.read(buf),
                )
            3 -> CustomTracepoint.Import(
                FfiConverterULong.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: CustomTracepoint) = when(value) {
        is CustomTracepoint.Call -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterOptionalString.allocationSize(value.`string`)
                + FfiConverterULong.allocationSize(value.`span`)
            )
        }
        is CustomTracepoint.Show -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterString.allocationSize(value.`string`)
                + FfiConverterULong.allocationSize(value.`span`)
            )
        }
        is CustomTracepoint.Import -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterULong.allocationSize(value.`span`)
            )
        }
    }

    override fun write(value: CustomTracepoint, buf: ByteBuffer) {
        when(value) {
            is CustomTracepoint.Call -> {
                buf.putInt(1)
                FfiConverterOptionalString.write(value.`string`, buf)
                FfiConverterULong.write(value.`span`, buf)
            }
            is CustomTracepoint.Show -> {
                buf.putInt(2)
                FfiConverterString.write(value.`string`, buf)
                FfiConverterULong.write(value.`span`, buf)
            }
            is CustomTracepoint.Import -> {
                buf.putInt(3)
                FfiConverterULong.write(value.`span`, buf)
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}







sealed class RenderException: Exception() {
    // Each variant is a nested class
    
    class VecCustomSourceDiagnostic(
        val `customSourceDiagnostics`: List<CustomSourceDiagnostic>
        ) : RenderException() {
        override val message
            get() = "customSourceDiagnostics=${ `customSourceDiagnostics` }"
    }
    

    companion object ErrorHandler : CallStatusErrorHandler<RenderException> {
        override fun lift(error_buf: RustBuffer.ByValue): RenderException = FfiConverterTypeRenderError.lift(error_buf)
    }

    
}

object FfiConverterTypeRenderError : FfiConverterRustBuffer<RenderException> {
    override fun read(buf: ByteBuffer): RenderException {
        

        return when(buf.getInt()) {
            1 -> RenderException.VecCustomSourceDiagnostic(
                FfiConverterSequenceTypeCustomSourceDiagnostic.read(buf),
                )
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: RenderException): Int {
        return when(value) {
            is RenderException.VecCustomSourceDiagnostic -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterSequenceTypeCustomSourceDiagnostic.allocationSize(value.`customSourceDiagnostics`)
            )
        }
    }

    override fun write(value: RenderException, buf: ByteBuffer) {
        when(value) {
            is RenderException.VecCustomSourceDiagnostic -> {
                buf.putInt(1)
                FfiConverterSequenceTypeCustomSourceDiagnostic.write(value.`customSourceDiagnostics`, buf)
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}




object FfiConverterOptionalString: FfiConverterRustBuffer<String?> {
    override fun read(buf: ByteBuffer): String? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterString.read(buf)
    }

    override fun allocationSize(value: String?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterString.allocationSize(value)
        }
    }

    override fun write(value: String?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterString.write(value, buf)
        }
    }
}




object FfiConverterSequenceString: FfiConverterRustBuffer<List<String>> {
    override fun read(buf: ByteBuffer): List<String> {
        val len = buf.getInt()
        return List<String>(len) {
            FfiConverterString.read(buf)
        }
    }

    override fun allocationSize(value: List<String>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterString.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<String>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterString.write(it, buf)
        }
    }
}




object FfiConverterSequenceTypeCustomSourceDiagnostic: FfiConverterRustBuffer<List<CustomSourceDiagnostic>> {
    override fun read(buf: ByteBuffer): List<CustomSourceDiagnostic> {
        val len = buf.getInt()
        return List<CustomSourceDiagnostic>(len) {
            FfiConverterTypeCustomSourceDiagnostic.read(buf)
        }
    }

    override fun allocationSize(value: List<CustomSourceDiagnostic>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeCustomSourceDiagnostic.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<CustomSourceDiagnostic>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeCustomSourceDiagnostic.write(it, buf)
        }
    }
}




object FfiConverterSequenceTypeProjectFilePathAndFd: FfiConverterRustBuffer<List<ProjectFilePathAndFd>> {
    override fun read(buf: ByteBuffer): List<ProjectFilePathAndFd> {
        val len = buf.getInt()
        return List<ProjectFilePathAndFd>(len) {
            FfiConverterTypeProjectFilePathAndFd.read(buf)
        }
    }

    override fun allocationSize(value: List<ProjectFilePathAndFd>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeProjectFilePathAndFd.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<ProjectFilePathAndFd>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeProjectFilePathAndFd.write(it, buf)
        }
    }
}




object FfiConverterSequenceTypeCustomTracepoint: FfiConverterRustBuffer<List<CustomTracepoint>> {
    override fun read(buf: ByteBuffer): List<CustomTracepoint> {
        val len = buf.getInt()
        return List<CustomTracepoint>(len) {
            FfiConverterTypeCustomTracepoint.read(buf)
        }
    }

    override fun allocationSize(value: List<CustomTracepoint>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeCustomTracepoint.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<CustomTracepoint>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeCustomTracepoint.write(it, buf)
        }
    }
}

fun `addProjectFiles`(`newProjectFiles`: List<ProjectFilePathAndFd>) =
    
    rustCall { _status ->
    _UniFFILib.INSTANCE.uniffi_beautyxt_rs_fn_func_add_project_files(FfiConverterSequenceTypeProjectFilePathAndFd.lower(`newProjectFiles`),_status)
}



fun `clearProjectFiles`() =
    
    rustCall { _status ->
    _UniFFILib.INSTANCE.uniffi_beautyxt_rs_fn_func_clear_project_files(_status)
}



fun `getProjectFileText`(`path`: String): String {
    return FfiConverterString.lift(
    rustCall { _status ->
    _UniFFILib.INSTANCE.uniffi_beautyxt_rs_fn_func_get_project_file_text(FfiConverterString.lower(`path`),_status)
})
}


fun `initializeWorld`() =
    
    rustCall { _status ->
    _UniFFILib.INSTANCE.uniffi_beautyxt_rs_fn_func_initialize_world(_status)
}



fun `markdownToDocx`(`markdown`: String): ByteArray {
    return FfiConverterByteArray.lift(
    rustCall { _status ->
    _UniFFILib.INSTANCE.uniffi_beautyxt_rs_fn_func_markdown_to_docx(FfiConverterString.lower(`markdown`),_status)
})
}


fun `markdownToHtml`(`markdown`: String): String {
    return FfiConverterString.lift(
    rustCall { _status ->
    _UniFFILib.INSTANCE.uniffi_beautyxt_rs_fn_func_markdown_to_html(FfiConverterString.lower(`markdown`),_status)
})
}


fun `plainTextToDocx`(`plainText`: String): ByteArray {
    return FfiConverterByteArray.lift(
    rustCall { _status ->
    _UniFFILib.INSTANCE.uniffi_beautyxt_rs_fn_func_plain_text_to_docx(FfiConverterString.lower(`plainText`),_status)
})
}


fun `removeProjectFiles`(`projectFilesPathsToRemove`: List<String>) =
    
    rustCall { _status ->
    _UniFFILib.INSTANCE.uniffi_beautyxt_rs_fn_func_remove_project_files(FfiConverterSequenceString.lower(`projectFilesPathsToRemove`),_status)
}



fun `setMainProjectFile`(`mainProjectFilePathAndFd`: ProjectFilePathAndFd) =
    
    rustCall { _status ->
    _UniFFILib.INSTANCE.uniffi_beautyxt_rs_fn_func_set_main_project_file(FfiConverterTypeProjectFilePathAndFd.lower(`mainProjectFilePathAndFd`),_status)
}



fun `testGetMainPdf`(): ByteArray {
    return FfiConverterByteArray.lift(
    rustCall { _status ->
    _UniFFILib.INSTANCE.uniffi_beautyxt_rs_fn_func_test_get_main_pdf(_status)
})
}

@Throws(RenderException::class)

fun `testGetMainSvg`(): ByteArray {
    return FfiConverterByteArray.lift(
    rustCallWithError(RenderException) { _status ->
    _UniFFILib.INSTANCE.uniffi_beautyxt_rs_fn_func_test_get_main_svg(_status)
})
}

@Throws(CustomFileException::class)

fun `updateProjectFile`(`newText`: String, `path`: String): String {
    return FfiConverterString.lift(
        rustCallWithError(CustomFileException) { _status ->
    _UniFFILib.INSTANCE.uniffi_beautyxt_rs_fn_func_update_project_file(FfiConverterString.lower(`newText`),FfiConverterString.lower(`path`),_status)
})
}


